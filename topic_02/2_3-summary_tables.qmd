---
title: "Creating summary tables"
---

This walkthrough assumes you have taken a look at the previous walkthrough. In the last walkthrough we discussed an easy way of getting descriptive stats using the `psych` package. Here we'll talk about how to put those values in a APA-esque format. FWIW, I personally am not a big fan of presenting / publishing data in tables. My feeling is that all things being equal, a good plot is typically the most effective way to present data. BUT, I recognize that there are times that call for us to present our data in tables.

## Preparing the environment

First let's load in the packages we'll need for this walkthrough:

```{r loading in packages}
pacman::p_load(psych, # for psych_describe()
               readr, # for read_table()
               tidyverse,
               gt # for tables
               )
```

and then recreate the aggression data summary table from the previous walkthrough (alternatively, if you've already done so just pull up the `aggression_data_summary` object). Here I recreate our steps from the previous walkthrough:

1.  load in the data

```{r importing agression data}
aggression_data <- read_table("http://tehrandav.is/courses/statistics/practice_datasets/aggression.dat", col_names = FALSE)
```

2.  wrangle the data (in this case we only need to add names, and change gender to a category)

```{r}

# add headers:
names(aggression_data) <- c('age', 'BPAQ', 'AISS', 'alcohol', 'BIS', 'NEOc', 'gender', 'NEOo')

# mutate columns
aggression_data <- 
  aggression_data %>% 
  mutate(fctr_Gender = recode_factor(gender, "0" = "Man", "1" = "Woman"))
 
```

3.  get summary stats using `psych_describe()`:

```{r}
aggression_data_table <- 
  psych::describe(aggression_data) 
```

## Generating summary statistics using `tidy` functions.

One downside is that by default, `psych::describe()` doesn't give us nice pretty (APA-esque) tables, and putting this output into a cleaner format requires a little work. In order to do so, we can leverage some of the functions from the `tidyverse`. How you go about constructing a cleaner table depends in large part on the content. For example, if you just wanted to convey the number of observations, mean, and std. dev, then it might be best to construct a summary table using `dplyr::summarize()`. For example a summary of `BPAQ`:

```{r}
aggression_data_table <- dplyr::summarise(aggression_data,
                                          "count" = n(),
                                          "mean" = mean(BPAQ),
                                          "sd" = sd(BPAQ)
                                          ) 

print(aggression_data_table)
```

Using `gt()` allows us to put the table in a neat (publication friendly) format, including adding a `caption` or title.

```{r}
gt(aggression_data_table, 
   caption = "Table 1. Summary statistics of BPAQ Scores")
```

```{r}
psych::describe(aggression_data) %>% gt()
```


Using the `pipe` operator we can simplify the code above:

```{r}
dplyr::summarise(aggression_data,
                 "count" = n(),
                 "mean" = mean(BPAQ),
                 "sd" = sd(BPAQ)
                 ) %>% # tying these two together with a pipe
  pander(caption = "Table 1. Summary statistics of BPAQ Scores")
```

We can also create a simple table by `fctr_Gender` by using `dplyr::group_by()`

```{r}
aggression_data %>% 
  dplyr::group_by(fctr_Gender) %>% 
  dplyr::summarise("count" = n(),
                   "mean" = mean(BPAQ),
                   "sd" = sd(BPAQ)
                   ) %>% 
  pander(caption = "Table X. Summary statistics of BPAQ Scores by group")
```

There is still some work to be done if you were sending a table like this to publication. For most of our purposes in class, however, this will do.

## Better APA, using a custom function

For an alternative, check out this link: <https://www.anthonyschmidt.co/post/2020-06-03-making-apa-tables-with-gt/>. The author, using the `gt` package build his own function, `apa()` to approximate APA formatted tables. This would be an alternative to using `pander`.

The code chunks below leverages his work.

First, his custom function:

```{r}
# create apa function

pacman::p_load(gt)

apa <- function(x, title = " ") {
  gt(x) %>%
  tab_options(
    table.border.top.color = "white",
    heading.title.font.size = px(16),
    column_labels.border.top.width = 3,
    column_labels.border.top.color = "black",
    column_labels.border.bottom.width = 3,
    column_labels.border.bottom.color = "black",
    table_body.border.bottom.color = "black",
    table.border.bottom.color = "white",
    table.width = pct(100),
    table.background.color = "white"
  ) %>%
  cols_align(align="center") %>%
  tab_style(
    style = list(
      cell_borders(
        sides = c("top", "bottom"),
        color = "white",
        weight = px(1)
      ),
      cell_text(
        align="center"
      ),
      cell_fill(color = "white", alpha = NULL)
      ),
    locations = cells_body(
      columns = everything(),
      rows = everything()
    )
  ) %>%
    #title setup
    tab_header(
    title = html("<i>", title, "</i>")
  ) %>%
  opt_align_table_header(align = "left")
}
```

And now applying it to our own data:

```{r}
aggression_data %>%
  dplyr::group_by(fctr_Gender) %>% 
  dplyr::summarise("count" = n(),
                   "mean" = mean(BPAQ),
                   "sd" = sd(BPAQ)
                   ) %>%
  apa("Table X. Summary statistics of BPAQ Scores by group")
```

Note that the formatting occurs when you Render.
